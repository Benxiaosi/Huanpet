package com.example.huanpet.model.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.huanpet.model.greendao.FosterDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FOSTER_DAO".
*/
public class FosterDaoDao extends AbstractDao<FosterDao, Long> {

    public static final String TABLENAME = "FOSTER_DAO";

    /**
     * Properties of entity FosterDao.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderNumber = new Property(1, String.class, "orderNumber", false, "ORDER_NUMBER");
        public final static Property BuyersImg = new Property(2, String.class, "buyersImg", false, "BUYERS_IMG");
        public final static Property BuyersName = new Property(3, String.class, "buyersName", false, "BUYERS_NAME");
        public final static Property BuyersPhone = new Property(4, String.class, "buyersPhone", false, "BUYERS_PHONE");
        public final static Property PitImg = new Property(5, String.class, "pitImg", false, "PIT_IMG");
        public final static Property PitText = new Property(6, String.class, "pitText", false, "PIT_TEXT");
        public final static Property PitName = new Property(7, String.class, "pitName", false, "PIT_NAME");
        public final static Property PitBeginTime = new Property(8, String.class, "pitBeginTime", false, "PIT_BEGIN_TIME");
        public final static Property PitStopTime = new Property(9, String.class, "pitStopTime", false, "PIT_STOP_TIME");
        public final static Property PitDaiTime = new Property(10, String.class, "pitDaiTime", false, "PIT_DAI_TIME");
        public final static Property PitPrice = new Property(11, String.class, "pitPrice", false, "PIT_PRICE");
        public final static Property PitState = new Property(12, String.class, "pitState", false, "PIT_STATE");
        public final static Property Remarks = new Property(13, String.class, "Remarks", false, "REMARKS");
    }


    public FosterDaoDao(DaoConfig config) {
        super(config);
    }
    
    public FosterDaoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FOSTER_DAO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ORDER_NUMBER\" TEXT," + // 1: orderNumber
                "\"BUYERS_IMG\" TEXT," + // 2: buyersImg
                "\"BUYERS_NAME\" TEXT," + // 3: buyersName
                "\"BUYERS_PHONE\" TEXT," + // 4: buyersPhone
                "\"PIT_IMG\" TEXT," + // 5: pitImg
                "\"PIT_TEXT\" TEXT," + // 6: pitText
                "\"PIT_NAME\" TEXT," + // 7: pitName
                "\"PIT_BEGIN_TIME\" TEXT," + // 8: pitBeginTime
                "\"PIT_STOP_TIME\" TEXT," + // 9: pitStopTime
                "\"PIT_DAI_TIME\" TEXT," + // 10: pitDaiTime
                "\"PIT_PRICE\" TEXT," + // 11: pitPrice
                "\"PIT_STATE\" TEXT," + // 12: pitState
                "\"REMARKS\" TEXT);"); // 13: Remarks
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FOSTER_DAO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FosterDao entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindString(2, orderNumber);
        }
 
        String buyersImg = entity.getBuyersImg();
        if (buyersImg != null) {
            stmt.bindString(3, buyersImg);
        }
 
        String buyersName = entity.getBuyersName();
        if (buyersName != null) {
            stmt.bindString(4, buyersName);
        }
 
        String buyersPhone = entity.getBuyersPhone();
        if (buyersPhone != null) {
            stmt.bindString(5, buyersPhone);
        }
 
        String pitImg = entity.getPitImg();
        if (pitImg != null) {
            stmt.bindString(6, pitImg);
        }
 
        String pitText = entity.getPitText();
        if (pitText != null) {
            stmt.bindString(7, pitText);
        }
 
        String pitName = entity.getPitName();
        if (pitName != null) {
            stmt.bindString(8, pitName);
        }
 
        String pitBeginTime = entity.getPitBeginTime();
        if (pitBeginTime != null) {
            stmt.bindString(9, pitBeginTime);
        }
 
        String pitStopTime = entity.getPitStopTime();
        if (pitStopTime != null) {
            stmt.bindString(10, pitStopTime);
        }
 
        String pitDaiTime = entity.getPitDaiTime();
        if (pitDaiTime != null) {
            stmt.bindString(11, pitDaiTime);
        }
 
        String pitPrice = entity.getPitPrice();
        if (pitPrice != null) {
            stmt.bindString(12, pitPrice);
        }
 
        String pitState = entity.getPitState();
        if (pitState != null) {
            stmt.bindString(13, pitState);
        }
 
        String Remarks = entity.getRemarks();
        if (Remarks != null) {
            stmt.bindString(14, Remarks);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FosterDao entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindString(2, orderNumber);
        }
 
        String buyersImg = entity.getBuyersImg();
        if (buyersImg != null) {
            stmt.bindString(3, buyersImg);
        }
 
        String buyersName = entity.getBuyersName();
        if (buyersName != null) {
            stmt.bindString(4, buyersName);
        }
 
        String buyersPhone = entity.getBuyersPhone();
        if (buyersPhone != null) {
            stmt.bindString(5, buyersPhone);
        }
 
        String pitImg = entity.getPitImg();
        if (pitImg != null) {
            stmt.bindString(6, pitImg);
        }
 
        String pitText = entity.getPitText();
        if (pitText != null) {
            stmt.bindString(7, pitText);
        }
 
        String pitName = entity.getPitName();
        if (pitName != null) {
            stmt.bindString(8, pitName);
        }
 
        String pitBeginTime = entity.getPitBeginTime();
        if (pitBeginTime != null) {
            stmt.bindString(9, pitBeginTime);
        }
 
        String pitStopTime = entity.getPitStopTime();
        if (pitStopTime != null) {
            stmt.bindString(10, pitStopTime);
        }
 
        String pitDaiTime = entity.getPitDaiTime();
        if (pitDaiTime != null) {
            stmt.bindString(11, pitDaiTime);
        }
 
        String pitPrice = entity.getPitPrice();
        if (pitPrice != null) {
            stmt.bindString(12, pitPrice);
        }
 
        String pitState = entity.getPitState();
        if (pitState != null) {
            stmt.bindString(13, pitState);
        }
 
        String Remarks = entity.getRemarks();
        if (Remarks != null) {
            stmt.bindString(14, Remarks);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FosterDao readEntity(Cursor cursor, int offset) {
        FosterDao entity = new FosterDao( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // buyersImg
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // buyersName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // buyersPhone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pitImg
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // pitText
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // pitName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // pitBeginTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // pitStopTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // pitDaiTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // pitPrice
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // pitState
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // Remarks
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FosterDao entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBuyersImg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBuyersName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBuyersPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPitImg(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPitText(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPitName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPitBeginTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPitStopTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPitDaiTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPitPrice(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPitState(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRemarks(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FosterDao entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FosterDao entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FosterDao entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
