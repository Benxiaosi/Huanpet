package com.example.huanpet.model.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.example.huanpet.model.greendao.BuyersDao;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BUYERS_DAO".
*/
public class BuyersDaoDao extends AbstractDao<BuyersDao, Long> {

    public static final String TABLENAME = "BUYERS_DAO";

    /**
     * Properties of entity BuyersDao.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FosterImg = new Property(1, String.class, "fosterImg", false, "FOSTER_IMG");
        public final static Property OrderNumber = new Property(2, String.class, "orderNumber", false, "ORDER_NUMBER");
        public final static Property PitImg = new Property(3, String.class, "pitImg", false, "PIT_IMG");
        public final static Property PitText = new Property(4, String.class, "pitText", false, "PIT_TEXT");
        public final static Property PitName = new Property(5, String.class, "pitName", false, "PIT_NAME");
        public final static Property PitBeginTime = new Property(6, String.class, "pitBeginTime", false, "PIT_BEGIN_TIME");
        public final static Property PitStopTime = new Property(7, String.class, "pitStopTime", false, "PIT_STOP_TIME");
        public final static Property PitDaiTime = new Property(8, String.class, "pitDaiTime", false, "PIT_DAI_TIME");
        public final static Property PitPrice = new Property(9, String.class, "pitPrice", false, "PIT_PRICE");
        public final static Property PitState = new Property(10, String.class, "pitState", false, "PIT_STATE");
        public final static Property Bathing = new Property(11, Boolean.class, "bathing", false, "BATHING");
        public final static Property BathingPrice = new Property(12, String.class, "bathingPrice", false, "BATHING_PRICE");
        public final static Property BathingFrequency = new Property(13, String.class, "bathingFrequency", false, "BATHING_FREQUENCY");
        public final static Property Study = new Property(14, Boolean.class, "study", false, "STUDY");
        public final static Property StudyPrice = new Property(15, Boolean.class, "studyPrice", false, "STUDY_PRICE");
        public final static Property Shuttle = new Property(16, Boolean.class, "shuttle", false, "SHUTTLE");
        public final static Property ShuttleFrequency = new Property(17, int.class, "shuttleFrequency", false, "SHUTTLE_FREQUENCY");
        public final static Property ShuttlePrice = new Property(18, Boolean.class, "shuttlePrice", false, "SHUTTLE_PRICE");
        public final static Property Remarks = new Property(19, String.class, "remarks", false, "REMARKS");
        public final static Property FosterName = new Property(20, String.class, "fosterName", false, "FOSTER_NAME");
        public final static Property Ranking = new Property(21, int.class, "ranking", false, "RANKING");
    }


    public BuyersDaoDao(DaoConfig config) {
        super(config);
    }
    
    public BuyersDaoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BUYERS_DAO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FOSTER_IMG\" TEXT," + // 1: fosterImg
                "\"ORDER_NUMBER\" TEXT," + // 2: orderNumber
                "\"PIT_IMG\" TEXT," + // 3: pitImg
                "\"PIT_TEXT\" TEXT," + // 4: pitText
                "\"PIT_NAME\" TEXT," + // 5: pitName
                "\"PIT_BEGIN_TIME\" TEXT," + // 6: pitBeginTime
                "\"PIT_STOP_TIME\" TEXT," + // 7: pitStopTime
                "\"PIT_DAI_TIME\" TEXT," + // 8: pitDaiTime
                "\"PIT_PRICE\" TEXT," + // 9: pitPrice
                "\"PIT_STATE\" TEXT," + // 10: pitState
                "\"BATHING\" INTEGER," + // 11: bathing
                "\"BATHING_PRICE\" TEXT," + // 12: bathingPrice
                "\"BATHING_FREQUENCY\" TEXT," + // 13: bathingFrequency
                "\"STUDY\" INTEGER," + // 14: study
                "\"STUDY_PRICE\" INTEGER," + // 15: studyPrice
                "\"SHUTTLE\" INTEGER," + // 16: shuttle
                "\"SHUTTLE_FREQUENCY\" INTEGER NOT NULL ," + // 17: shuttleFrequency
                "\"SHUTTLE_PRICE\" INTEGER," + // 18: shuttlePrice
                "\"REMARKS\" TEXT," + // 19: remarks
                "\"FOSTER_NAME\" TEXT," + // 20: fosterName
                "\"RANKING\" INTEGER NOT NULL );"); // 21: ranking
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BUYERS_DAO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BuyersDao entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fosterImg = entity.getFosterImg();
        if (fosterImg != null) {
            stmt.bindString(2, fosterImg);
        }
 
        String orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindString(3, orderNumber);
        }
 
        String pitImg = entity.getPitImg();
        if (pitImg != null) {
            stmt.bindString(4, pitImg);
        }
 
        String pitText = entity.getPitText();
        if (pitText != null) {
            stmt.bindString(5, pitText);
        }
 
        String pitName = entity.getPitName();
        if (pitName != null) {
            stmt.bindString(6, pitName);
        }
 
        String pitBeginTime = entity.getPitBeginTime();
        if (pitBeginTime != null) {
            stmt.bindString(7, pitBeginTime);
        }
 
        String pitStopTime = entity.getPitStopTime();
        if (pitStopTime != null) {
            stmt.bindString(8, pitStopTime);
        }
 
        String pitDaiTime = entity.getPitDaiTime();
        if (pitDaiTime != null) {
            stmt.bindString(9, pitDaiTime);
        }
 
        String pitPrice = entity.getPitPrice();
        if (pitPrice != null) {
            stmt.bindString(10, pitPrice);
        }
 
        String pitState = entity.getPitState();
        if (pitState != null) {
            stmt.bindString(11, pitState);
        }
 
        Boolean bathing = entity.getBathing();
        if (bathing != null) {
            stmt.bindLong(12, bathing ? 1L: 0L);
        }
 
        String bathingPrice = entity.getBathingPrice();
        if (bathingPrice != null) {
            stmt.bindString(13, bathingPrice);
        }
 
        String bathingFrequency = entity.getBathingFrequency();
        if (bathingFrequency != null) {
            stmt.bindString(14, bathingFrequency);
        }
 
        Boolean study = entity.getStudy();
        if (study != null) {
            stmt.bindLong(15, study ? 1L: 0L);
        }
 
        Boolean studyPrice = entity.getStudyPrice();
        if (studyPrice != null) {
            stmt.bindLong(16, studyPrice ? 1L: 0L);
        }
 
        Boolean shuttle = entity.getShuttle();
        if (shuttle != null) {
            stmt.bindLong(17, shuttle ? 1L: 0L);
        }
        stmt.bindLong(18, entity.getShuttleFrequency());
 
        Boolean shuttlePrice = entity.getShuttlePrice();
        if (shuttlePrice != null) {
            stmt.bindLong(19, shuttlePrice ? 1L: 0L);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(20, remarks);
        }
 
        String fosterName = entity.getFosterName();
        if (fosterName != null) {
            stmt.bindString(21, fosterName);
        }
        stmt.bindLong(22, entity.getRanking());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BuyersDao entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fosterImg = entity.getFosterImg();
        if (fosterImg != null) {
            stmt.bindString(2, fosterImg);
        }
 
        String orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindString(3, orderNumber);
        }
 
        String pitImg = entity.getPitImg();
        if (pitImg != null) {
            stmt.bindString(4, pitImg);
        }
 
        String pitText = entity.getPitText();
        if (pitText != null) {
            stmt.bindString(5, pitText);
        }
 
        String pitName = entity.getPitName();
        if (pitName != null) {
            stmt.bindString(6, pitName);
        }
 
        String pitBeginTime = entity.getPitBeginTime();
        if (pitBeginTime != null) {
            stmt.bindString(7, pitBeginTime);
        }
 
        String pitStopTime = entity.getPitStopTime();
        if (pitStopTime != null) {
            stmt.bindString(8, pitStopTime);
        }
 
        String pitDaiTime = entity.getPitDaiTime();
        if (pitDaiTime != null) {
            stmt.bindString(9, pitDaiTime);
        }
 
        String pitPrice = entity.getPitPrice();
        if (pitPrice != null) {
            stmt.bindString(10, pitPrice);
        }
 
        String pitState = entity.getPitState();
        if (pitState != null) {
            stmt.bindString(11, pitState);
        }
 
        Boolean bathing = entity.getBathing();
        if (bathing != null) {
            stmt.bindLong(12, bathing ? 1L: 0L);
        }
 
        String bathingPrice = entity.getBathingPrice();
        if (bathingPrice != null) {
            stmt.bindString(13, bathingPrice);
        }
 
        String bathingFrequency = entity.getBathingFrequency();
        if (bathingFrequency != null) {
            stmt.bindString(14, bathingFrequency);
        }
 
        Boolean study = entity.getStudy();
        if (study != null) {
            stmt.bindLong(15, study ? 1L: 0L);
        }
 
        Boolean studyPrice = entity.getStudyPrice();
        if (studyPrice != null) {
            stmt.bindLong(16, studyPrice ? 1L: 0L);
        }
 
        Boolean shuttle = entity.getShuttle();
        if (shuttle != null) {
            stmt.bindLong(17, shuttle ? 1L: 0L);
        }
        stmt.bindLong(18, entity.getShuttleFrequency());
 
        Boolean shuttlePrice = entity.getShuttlePrice();
        if (shuttlePrice != null) {
            stmt.bindLong(19, shuttlePrice ? 1L: 0L);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(20, remarks);
        }
 
        String fosterName = entity.getFosterName();
        if (fosterName != null) {
            stmt.bindString(21, fosterName);
        }
        stmt.bindLong(22, entity.getRanking());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BuyersDao readEntity(Cursor cursor, int offset) {
        BuyersDao entity = new BuyersDao( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fosterImg
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // orderNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pitImg
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pitText
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pitName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // pitBeginTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // pitStopTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // pitDaiTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // pitPrice
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // pitState
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // bathing
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // bathingPrice
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // bathingFrequency
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // study
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // studyPrice
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0, // shuttle
            cursor.getInt(offset + 17), // shuttleFrequency
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0, // shuttlePrice
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // remarks
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // fosterName
            cursor.getInt(offset + 21) // ranking
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BuyersDao entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFosterImg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrderNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPitImg(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPitText(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPitName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPitBeginTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPitStopTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPitDaiTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPitPrice(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPitState(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBathing(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setBathingPrice(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setBathingFrequency(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setStudy(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setStudyPrice(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setShuttle(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0);
        entity.setShuttleFrequency(cursor.getInt(offset + 17));
        entity.setShuttlePrice(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
        entity.setRemarks(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setFosterName(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setRanking(cursor.getInt(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BuyersDao entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BuyersDao entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BuyersDao entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
